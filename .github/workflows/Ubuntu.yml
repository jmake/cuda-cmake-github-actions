# Compile project on Ubuntu
name: Ubuntu

on:
  workflow_dispatch: 
  
  push:
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/Ubuntu.yml"
  # pull_request:
  #   paths:
  #     - "**"
  #     - "!.github"
  #     - ".github/workflows/Ubuntu.yml"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # 20.04 supports CUDA 11.0+
          - os: ubuntu-20.04
            cuda: "11.3"
            gcc: 10
          # - os: ubuntu-20.04
          #   cuda: "11.2"
          #   gcc: 10
          # 18.04 supports CUDA 10.1+ (gxx <= 8)
          # - os: ubuntu-18.04
          #   cuda: "11.0"
          #   gcc: 8
          # - os: ubuntu-18.04
          #   cuda: "10.2"
          #   gcc: 8
          #- os: ubuntu-18.04
          #  cuda: "10.1"
          #  gcc: 8

          # 16.04 runners are deprecated / removed in september 2021.
          # It should still be possible to install CUDA 8 - CUDA 10 in 18.04 images by using the 16.04 repository, although milage may vary.
          # @todo - modify script so this can be passed via a bash variable as an override / incase lsb_release is unavailable 
    env:
      build_dir: "build"
      config: "Release"

    steps:
    - uses: actions/checkout@v2
    
    - name: Get CUDA 
      ##
      ## https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html
      ##
      run : |
        echo "wget..."
        wget https://developer.download.nvidia.com/compute/cuda/redist/cuda_nvcc/linux-x86_64/cuda_nvcc-linux-x86_64-11.4.120-archive.tar.xz > /dev/null 
        
        echo "tar..."
        tar -xvf cuda_nvcc-linux-x86_64-11.4.120-archive.tar.xz > /dev/null 
        
        #cd cuda_nvcc-linux-x86_64-11.4.120-archive
        #ls -la cuda_nvcc-linux-x86_64-11.4.120-archive/* 
        
        #export PATH="$PATH:${PWD}/cuda_nvcc-linux-x86_64-11.4.120-archive/bin"
        
        CUDA_PATH="${PWD}/cuda_nvcc-linux-x86_64-11.4.120-archive"
        echo "CUDA_PATH:", ${CUDA_PATH}
        export CUDA_PATH=${CUDA_PATH}
        export PATH="$CUDA_PATH/bin:$PATH"
        export LD_LIBRARY_PATH="$CUDA_PATH/lib:$LD_LIBRARY_PATH"
        export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$LD_LIBRARY_PATH"
        # Check nvcc is now available.
        nvcc -V


        # If executed on github actions, make the appropriate echo statements to update the environment
        if [[ $GITHUB_ACTIONS ]]; then
            # Set paths for subsequent steps, using ${CUDA_PATH}
            echo "Adding CUDA to CUDA_PATH, PATH and LD_LIBRARY_PATH"
            echo "CUDA_PATH=${CUDA_PATH}" >> $GITHUB_ENV
            echo "${CUDA_PATH}/bin" >> $GITHUB_PATH
            echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib64:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        fi
        
        nvcc --version 
#
#    - name: Install CUDA
#      env:
#        cuda: ${{ matrix.cuda }}
#      run: ./scripts/actions/install_cuda_ubuntu.sh
#      shell: bash
#
    # Specify the correct host compilers
    - name: Install/Select gcc and g++ 
      run: |
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV

    - name: Configure cmake
      id: configure
      run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }}

    - name: Configure Error Processing
      if: ${{ failure() && steps.configure.outcome == 'failure' }}
      working-directory: ${{ env.build_dir }}
      run: |
          if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
            echo "---- CMakeFiles/CMakeOutput.log"
            cat CMakeFiles/CMakeOutput.log
            echo "----"
          fi
          if [[ -f "CMakeFiles/CMakeError.log" ]]; then
            echo "---- CMakeFiles/CMakeError.log"
            cat CMakeFiles/CMakeError.log
            echo "----"
          fi



    - name: Build everything else
      working-directory: ${{ env.build_dir }}
      run: cmake --build . --target all --verbose -j `nproc`

